#!/usr/bin/env python3

import sys
import subprocess
import boto3
import json
import logging
import configparser
from pathlib import Path

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Load configuration
config = configparser.ConfigParser()
config_file = Path.home() / '.git-commit-message-config.ini'
if config_file.exists():
    config.read(config_file)
else:
    logger.warning(f"Config file not found at {config_file}. Using default values.")

AWS_PROFILE = config.get('AWS', 'profile_name', fallback='default')
MODEL_ID = config.get('Claude', 'model_id', fallback='anthropic.claude-v2')

def get_git_diff():
    try:
        return subprocess.check_output(['git', 'diff', '--cached']).decode('utf-8')
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to get git diff: {e}")
        return None

def generate_commit_message_claude(diff):
    try:
        session = boto3.Session(profile_name=AWS_PROFILE)
        bedrock = session.client('bedrock-runtime')
        
        messages = [
            {"role": "user", "content": f"Generate a concise and informative commit message based on the following git diff:\n\n{diff}\n\nThe commit message should:\n1. Start with a summary in imperative mood\n2. Explain the 'why' behind changes, when possible. Don't make anything up.\n3. Keep the summary under 50 characters\n4. Use bullet points for multiple changes"}
        ]
        
        body = json.dumps({
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": 300,
            "messages": messages,
            "temperature": 0.3,
            "top_p": 1,
        })
        
        response = bedrock.invoke_model(
            modelId=MODEL_ID,
            body=body
        )
        
        response_body = json.loads(response['body'].read())
        return response_body['content'][0]['text']
    except Exception as e:
        logger.error(f"Failed to generate commit message: {e}")
        return None

def update_commit_message(file_path, new_message):
    try:
        with open(file_path, 'r+') as f:
            content = f.read()
            f.seek(0)
            f.write(f"{new_message.strip()}\n\n{content}")
        logger.info("Successfully updated commit message")
    except IOError as e:
        logger.error(f"Failed to update commit message file: {e}")

if __name__ == '__main__':
    try:
        commit_msg_file = sys.argv[1]
        diff = get_git_diff()
        if diff:
            commit_message = generate_commit_message_claude(diff)
            if commit_message:
                print(commit_message)
                update_commit_message(commit_msg_file, commit_message)
            else:
                logger.warning("No commit message generated. Using default message.")
        else:
            logger.warning("No diff found. Skipping commit message generation.")
    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}")

# To set up as a pre-commit hook:
# 1. Save this script as .git/hooks/prepare-commit-msg
# 2. Make it executable: chmod +x .git/hooks/prepare-commit-msg
# 3. Ensure you have the required Python packages installed:
#    pip install boto3 configparser

# Create a config file at ~/.git-commit-message-config.ini with the following content:
# [AWS]
# profile_name = your_sso_profile_name
#
# [Claude]
# model_id = anthropic.claude-3-5-sonnet-20240620-v1:0

